{{>licenseInfo}}
package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import net.jqwik.api.*;
import net.jqwik.api.lifecycle.AfterProperty;
import net.jqwik.api.lifecycle.BeforeProperty;
import net.jqwik.time.api.Dates;
import net.jqwik.time.api.DateTimes;

import static org.assertj.core.api.Assertions.*;

import erni.betterask.openapi.resttemplate.test.OpenApiValidator;
import erni.betterask.openapi.resttemplate.test.ValidArbitrarySupplier;
import erni.betterask.openapi.resttemplate.test.InvalidArbitrarySupplier;

/**
 * Model tests for {{classname}}
 */
class {{classname}}Test {
    {{#models}}
    {{#model}}
        {{^vendorExtensions.x-is-one-of-interface}}
            {{^isEnum}}

    private static final OpenApiValidator VALIDATOR = new OpenApiValidator(
        "target/generated-sources/openapi/api/openapi.yaml",
        {{classname}}Test.class
    );

    public static class Valid{{classname}}ArbitrarySupplier implements ArbitrarySupplier<{{classname}}> {
        @Override
        public Arbitrary<{{classname}}> get() {
            return new ValidArbitrarySupplier<>(
                "target/generated-sources/openapi/api/openapi.yaml", {{classname}}.class
            )
            .get();
        }
    }

    public static class Invalid{{classname}}ArbitrarySupplier implements ArbitrarySupplier<{{classname}}> {
        @Override
        public Arbitrary<{{classname}}> get() {
            return new InvalidArbitrarySupplier<>(
                "target/generated-sources/openapi/api/openapi.yaml", {{classname}}.class
            )
            .get();
        }
    }
            {{/isEnum}}

    @Disabled("for development only")
    @Property
    public void showValues(@ForAll(supplier = Valid{{classname}}ArbitrarySupplier.class) {{classname}} value) {
        System.out.println(value);
    }

    @Disabled("for development only")
    @Property
    public void showInvalidValues(@ForAll(supplier = Invalid{{classname}}ArbitrarySupplier.class) {{classname}} value) {
        System.out.println(value);
    }

    @Property
		    {{#vendorExtensions.x-jqwik-property-attributes}}
                ({{{vendorExtensions.x-jqwik-property-attributes}}})
		    {{/vendorExtensions.x-jqwik-property-attributes}}
    public void isValid(@ForAll(supplier = Valid{{classname}}ArbitrarySupplier.class) {{classname}} value) {
        boolean result = VALIDATOR.validate(value);
        assertThat(result).isTrue();
    }

            {{^vendorExtensions.x-is-one-of-interface}}
            {{#discriminator}}
            {{^parent}}

    @Disabled("TODO")
    @Property
            {{#vendorExtensions.x-jqwik-property-attributes}}
                ({{{vendorExtensions.x-jqwik-property-attributes}}})
            {{/vendorExtensions.x-jqwik-property-attributes}}
    public void isInvalid(@ForAll(supplier = Invalid{{classname}}ArbitrarySupplier.class) {{classname}} value) {
        boolean result = VALIDATOR.validate(value);
        assertThat(result).isFalse();
    }

            {{/parent}}
            {{/discriminator}}
            {{/vendorExtensions.x-is-one-of-interface}}

    @Property
            {{#vendorExtensions.x-jqwik-property-attributes}}
                ({{{vendorExtensions.x-jqwik-property-attributes}}})
            {{/vendorExtensions.x-jqwik-property-attributes}}
    public void serializationEquality(@ForAll(supplier = Valid{{classname}}ArbitrarySupplier.class) {{classname}} value) {
        String serialized1 = VALIDATOR.toJson(value);
        {{classname}} deserialized1 = VALIDATOR.fromJson(serialized1, {{classname}}.class);
        String serialized2 = VALIDATOR.toJson(deserialized1);
        assertThat(serialized2).isEqualTo(serialized1);
    }

    @Property
            {{#vendorExtensions.x-jqwik-property-attributes}}
                ({{{vendorExtensions.x-jqwik-property-attributes}}})
            {{/vendorExtensions.x-jqwik-property-attributes}}
    public void deserializationEquality(@ForAll(supplier = Valid{{classname}}ArbitrarySupplier.class) {{classname}} value) {
        String serialized1 = VALIDATOR.toJson(value);
        {{classname}} deserialized1 = VALIDATOR.fromJson(serialized1, {{classname}}.class);
        String serialized2 = VALIDATOR.toJson(deserialized1);
        {{classname}} deserialized2 = VALIDATOR.fromJson(serialized2, {{classname}}.class);
        assertThat(deserialized2).isEqualTo(deserialized1);
    }
            {{#nil}}
            {{#allVars}}

    /**
     * Test the property '{{name}}' of type '{{dataType}}'
     */
            {{/allVars}}
            {{/nil}}
        {{/vendorExtensions.x-is-one-of-interface}}
    {{/model}}
    {{/models}}
}
